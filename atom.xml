<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liam&#39;s Blog</title>
  
  <subtitle>生活明朗，万物可爱。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-22T09:26:21.358Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Liam</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker学习.md</title>
    <link href="http://example.com/posts/647f1677.html"/>
    <id>http://example.com/posts/647f1677.html</id>
    <published>2022-11-21T22:16:07.000Z</published>
    <updated>2022-11-22T09:26:21.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker入门"><a href="#Docker入门" class="headerlink" title="Docker入门"></a>Docker入门</h1><h2 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h2><h3 id="引入Docker"><a href="#引入Docker" class="headerlink" title="引入Docker"></a>引入Docker</h3><p>同样的应用在部署时，由于组件较多，运行环境复杂，会遇到类似问题：</p><ul><li>将不同的软件集成起来的过程中有很多不可控的风险，由于依赖关系复杂，容易出现兼容性问题</li><li>由于开发、测试、生产环境的差异，一旦需要重新迁移服务器或者重新部署一套环境，还将重新执行一遍</li></ul><h3 id="Docker结构"><a href="#Docker结构" class="headerlink" title="Docker结构"></a>Docker结构</h3><p><img src="https://i0.hdslb.com/bfs/album/42e275a025c4c5acdd0586b43aae5080b6859363.png" alt="image-20221121222421429"></p><ul><li>Docker 将用户程序与所需要调用的系统函数库一起打包</li><li>Docker 在运行到不同操作系统时，直接通过内核创建虚拟的操作系统实例（内核和库），来隔离不同的进程和资源</li><li><p>Docker 允许开发中将应用、依赖、函数库、配置一起打包，形成可移植镜像</p></li><li><p>Docker 应用运行在容器中，使用沙箱机制，相互隔离</p></li><li>Docker 镜像中包含完整运行环境，包括系统函数库，仅依赖系统的 Linux 内核，因此可以在任意 Linux 操作系统上运行</li></ul><h3 id="Docker主要三大类用途"><a href="#Docker主要三大类用途" class="headerlink" title="Docker主要三大类用途"></a>Docker主要三大类用途</h3><ul><li>提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境</li><li>提供弹性的云服务。因为Docker容器可以随开随关，很适合动态扩容和缩容。</li><li>组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。</li></ul><h3 id="Docker-与-虚拟机"><a href="#Docker-与-虚拟机" class="headerlink" title="Docker 与 虚拟机"></a>Docker 与 虚拟机</h3><ul><li><p>虚拟机（virtual machine）是带环境安装的另一种解决方案，它可以在一种操作系统里面运行另一种操作系统</p></li><li><p>应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。</p><p><img src="https://i0.hdslb.com/bfs/album/702e936fa1292bbd649b295590c469528de804ac.png" alt="image-20221121223504433" style="zoom: 80%;" /></p></li></ul><p>虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点：</p><ul><li>资源占用多,虚拟机会独占一部分内存和硬盘空间</li><li>冗余步骤多,虚拟机是完整的操作系统，需要经过繁琐的配置</li><li>启动慢，启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行</li></ul><h2 id="Docker-的组成"><a href="#Docker-的组成" class="headerlink" title="Docker 的组成"></a>Docker 的组成</h2><h3 id="镜像-Image"><a href="#镜像-Image" class="headerlink" title="镜像(Image)"></a>镜像(Image)</h3><ul><li>Docker 把应用程序及其依赖，打包在image 文件里面。只有通过这个文件，才能生成Docker容器。</li><li>image 文件可以看作是容器的模板，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等)。</li><li>Docker 根据 image 文件生成容器的实例。同一个image文件，可以生成多个同时运行的容器实例。</li><li>镜像不包含任何动态数据，其内容在构建之后也不会被改变。</li><li>image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而成</li><li>image 文件是通用的，一台机器的 image 文件拷贝到另外一台机器，照样可以使用。</li><li>为了方便共享，image文件创作完成后，可以上传到网上的仓库。Docker 的官方仓库 Docker Hub 是最重要、最常用的 image 仓库。</li></ul><h3 id="容器-Container"><a href="#容器-Container" class="headerlink" title="容器(Container)"></a>容器(Container)</h3><ul><li>镜像(Image) 和 容器(Container) 的关系，就像是面对对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。</li><li>容器是一个独立运行的一个或一组应用，以及它们的运行态环境，容器可以被创建、启动、停止、删除、暂停等</li><li>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。拥有自己的 root 文件系统、自己的网络配置、进程空间，甚至自己的用户 ID 空间</li></ul><h3 id="仓库-Repository"><a href="#仓库-Repository" class="headerlink" title="仓库(Repository)"></a>仓库(Repository)</h3><ul><li>镜像构建完成后，可以很容易在当前宿主机上运行，但是，如果需要在其他服务器上使用这个镜像，就需要一个集中的存储、分发镜像的服务，Docker Registy 就是这样的服务</li><li>一个 Docker Registy 中可以包含多个仓库（Repository）；每个仓库可以包含多个 标签（Tag）；每个标签对应一个镜像</li><li>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过==&lt;仓库名&gt;:&lt;标签&gt;==的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。</li></ul><h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h2><ul><li><p>客户端(client):通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</p></li><li><p>服务端(server): Docker守护进程，负责处理Docker指令，管理镜像、容器等</p><p><img src="https://i0.hdslb.com/bfs/album/9d5f5ce77fd05d4818eca9d986e68ab0c01a0ead.png" alt="image-20221121230235230" style="zoom:80%;" /></p></li></ul><h1 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h1><ul><li>参考如下两个网站：<ul><li><a href="https://www.runoob.com/docker/centos-docker-install.html">https://www.runoob.com/docker/centos-docker-install.html</a></li><li><a href="https://yeasy.gitbook.io/docker_practice/install/centos#shi-yong-yum-an-zhuang">https://yeasy.gitbook.io/docker_practice/install/centos#shi-yong-yum-an-zhuang</a></li></ul></li><li>对于 “无法ping“、”DNS无法解析“参考下面网站：<ul><li><a href="https://blog.csdn.net/whatday/article/details/88791582">https://blog.csdn.net/whatday/article/details/88791582</a></li><li><a href="https://www.cnblogs.com/wgying/p/6006609.html">https://www.cnblogs.com/wgying/p/6006609.html</a></li></ul></li><li>安装成功</li></ul><p><img src="https://i0.hdslb.com/bfs/album/c72bd9d5f0de0de4eef9a098ed127b9cae1c7276.png" alt="image-20221122095111513"></p><ul><li>配置Docker 国内镜像加速：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></li><li>启动 Docker</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker # 启动docker服务</span><br><span class="line"></span><br><span class="line">systemctl stop docker # 停止docker服务</span><br><span class="line"></span><br><span class="line">systemctl restart docker # 重启docker服务</span><br></pre></td></tr></table></figure><h1 id="Docker基础"><a href="#Docker基础" class="headerlink" title="Docker基础"></a>Docker基础</h1><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><h3 id="镜像操作过程"><a href="#镜像操作过程" class="headerlink" title="镜像操作过程"></a>镜像操作过程</h3><p><img src="https://i0.hdslb.com/bfs/album/b1fec25a13853c0896ff85b61168132f4b3449e4.png" alt="image-20221122104419074" style="zoom:67%;" /></p><h3 id="镜像操作示例"><a href="#镜像操作示例" class="headerlink" title="镜像操作示例"></a>镜像操作示例</h3><ul><li>访问 DockerHub搜索镜像：<a href="https://hub.docker.com/">https://hub.docker.com/</a> ，搜索 redis</li><li>拉取镜像：<code>docker pull redis:5.0.14</code>  <strong>(作者本机版本)</strong></li><li>查看本地镜像：<code>docker images</code></li><li>将镜像导出到磁盘：<code>docker save -o 文件名称 镜像名称/ID</code></li><li>删除本地镜像：<code>docker rmi 镜像名称/ID</code></li><li>导入镜像：<code>docker load -i 文件名称</code></li></ul><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="容器操作过程"><a href="#容器操作过程" class="headerlink" title="容器操作过程"></a>容器操作过程</h3><p><img src="https://i0.hdslb.com/bfs/album/a8b32baec76185451285ef3c9df4aa8292a89b18.png" alt="image-20221122104337476" style="zoom:67%;" /></p><h3 id="常用操作命令"><a href="#常用操作命令" class="headerlink" title="常用操作命令"></a>常用操作命令</h3><ul><li><code>docker run</code>    —-    新建并启动容器</li><li><code>docker start/stop/pause/unpause</code>    —-   启动/停止/暂停/恢复容器</li><li><code>docker exec</code>   —-    进入容器执行命令</li><li><code>docker logs</code>    —-    查看容器运行日志</li><li><code>docker ps</code>    —-    查看容器的状态</li><li><code>docker rm</code>    —-    删除指定容器</li></ul><h3 id="Nginx容器示例"><a href="#Nginx容器示例" class="headerlink" title="Nginx容器示例"></a>Nginx容器示例</h3><ul><li>拉去 nginx 镜像： <code>docker pull nginx:1.22.1</code> <strong>(作者本机版本)</strong></li><li>创建并启动容器：<code>docker run --name mynginx -d -p 80:80 nginx</code><ul><li>—name：指定容器名称</li><li>-p：讲宿主机端口与容器端口映射，格式：宿主机端口：容器端口</li><li>-d：后台运行容器</li></ul></li></ul><p><img src="https://i0.hdslb.com/bfs/album/d40b70b9a2537523281a70c369521bbe67345f87.png" alt="image-20221122110256473"></p><p><img src="https://i0.hdslb.com/bfs/album/d8929ac7a1127f92fd357aa0eb45dbfcdecef679.png" alt="image-20221122110446960" style="zoom: 50%;" /></p><h3 id="Redis-容器示例-—-进入容器"><a href="#Redis-容器示例-—-进入容器" class="headerlink" title="Redis 容器示例 — 进入容器"></a>Redis 容器示例 — 进入容器</h3><ul><li>拉取 redis 镜像：<code>docker pull redis</code></li><li>创建并启动容器：<code>docker run --name myredis -d -p 6379:6379 redis</code></li><li>进入容器：<code>docker exec -it myredis bash</code><ul><li>-it：给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</li><li>bash：进入容器后执行的命令</li></ul></li><li>进入容器后执行：<code>redis-cli</code>，使用 redis 客户端操作 redis</li><li>可将上面两步骤结合：<code>docker exec -it myredis redis-cli</code></li></ul><h4 id="关于-Redis-的一些命令（某些可能在Docker中无法使用）"><a href="#关于-Redis-的一些命令（某些可能在Docker中无法使用）" class="headerlink" title="关于 Redis 的一些命令（某些可能在Docker中无法使用）"></a>关于 Redis 的一些命令（某些可能在Docker中无法使用）</h4><ul><li><p>redis 常用命令</p><ul><li><code>redis-server</code>    —-    redis 服务器</li><li><code>redis-cli</code>    —-    redis 命令行客户端</li><li><code>redis-benchmark</code>    —-    redis 性能测试工具</li><li><code>redis-check-aof</code>    —-    aof 文件修复工具</li><li><code>redis-check-dump</code>    —-    rdb 文件检查工具</li></ul></li><li><p>停止 redis 命令</p><ul><li><code>redis-cli shutdown</code>    —-    停止 redis 命令</li></ul></li><li><p>启动 redis 命令</p><ul><li><code>redis-server</code>    —-    启动 redis-server 服务</li><li><code>redis-server ./redis.conf</code>    —-    带配置文件启动</li><li><code>redis-server ./redis.conf --daemonize yes --port 1123</code>    —-    带配置文件启动 且指定某几个配置（配置名前加 —）</li></ul></li><li><p>redis 命令客户端</p><ul><li><code>redis-cli -h 127.0.0.1 -p 1123</code>    —-    在127.0.0.1:1123 端口进行交互</li></ul></li></ul><h1 id="Docker-进阶"><a href="#Docker-进阶" class="headerlink" title="Docker 进阶"></a>Docker 进阶</h1><h3 id="Docker-数据卷"><a href="#Docker-数据卷" class="headerlink" title="Docker 数据卷"></a>Docker 数据卷</h3><p>容器中的数据问题</p><ul><li>一个容器运行了一段时间，肯定会产生一些数据，比如日志、数据库数据、新改的配置文件等等，如果这些数据文件存放在容器中，当我们删除容器时，这些数据也会被随之删除</li><li>在 docker 中，提供了一种存储数据的方法，叫做”数据卷“，可以达到数据共享的目的</li></ul><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>​    我们可以把”数据卷“ Data Volumes 理解成”宿主机中的目录“，当把某个卷和容器中的某个目录建立映射关系后，就相当于把宿主机中的某个目录和容器中的某个目录建立了映射关系，如下图所示：</p><p><img src="https://i0.hdslb.com/bfs/album/8a7e8a71ed13cf6f2ac7f66398ff97b732d9688a.png" alt="image-20221122120029878" style="zoom:67%;" /></p><p>数据卷提供了很多有用的特性：</p><ul><li>数据卷可以在容器之间共享和重用，容器间传递数据将变得高效与方便；</li><li>对数据卷内数据的修改会立马生效，无论是容器内操作还是本地操作；</li><li>对数据卷的更新不会影响镜像，解耦开应用和数据；</li><li>卷会一直存在，直到没有容器使用，可以安全地卸载它。</li></ul><h3 id="数据卷操作命令"><a href="#数据卷操作命令" class="headerlink" title="数据卷操作命令"></a>数据卷操作命令</h3><p>基本语法为：<code>docker volume [COMMAND]</code>，其中 COMMAND 可选值：</p><ul><li>create：创建一个 volume；</li><li>inspect：显示一个或多个 volume 的信息</li><li>ls：列出所有的 volume</li><li>prune：删除未使用的 volume</li><li>rm：删除一个或多个指定的 volume</li></ul><p>在 linux 的 docker 主机中创建一个卷时，其在宿主机对应的目录（挂载点）路径为 <code>/var/lib/docker/volumes/卷名/_data</code></p><h3 id="挂载卷"><a href="#挂载卷" class="headerlink" title="挂载卷"></a>挂载卷</h3><p>在创建容器时，可以通过 —volume 或 -v 参数挂载一个数据卷到某个容器目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name testAcon -v testA:/data -d redis</span><br></pre></td></tr></table></figure><p>上述命令表示创建一个名为 testAcon 的容器，将 testA 卷映射到 testAcon 容器的 /data 目录中</p><p>==注意：==</p><ul><li>如果卷映射的目录在容器中不存在时，会自动在容器中创建对应的目录</li><li>一个容器可以使用多个卷，只需要多次使用 -v 指定选项即可，如：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name testBcon -v testA:/data -v testB:/var/log -d redis</span><br></pre></td></tr></table></figure><ul><li>当指定的卷不存在时，docker 会自动创建对应的卷，上述命令中的 testB 数据卷会被自动创建</li></ul><h3 id="绑定挂载"><a href="#绑定挂载" class="headerlink" title="绑定挂载"></a>绑定挂载</h3><p>前面创建的数据卷都存放在 <code>/var/lib/docker/volumes</code> 目录中，这个目录时固定的，它们都能被 docker volume 命令管理</p><p>docker 还有一种映射宿主机目录的方法，这种方法被称为”绑定挂载“，绑定挂载能够将指定的宿主机目录挂载到容器中，只需要将卷名替换成宿主机上的目录路径即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name testAcon -v /root/test1:/data1 redis</span><br></pre></td></tr></table></figure><ul><li>上述命令将宿主机的 <code>/root/test1</code> 目录映射到容器的 <code>/data1</code> 目录中</li><li>绑定挂载不会生成任何卷，它直接将指定的宿主机目录映射到容器中，所以，docker volume 命令无法查看或管理到绑定挂载的路径</li></ul><p>==！！！重要！！！！==</p><ul><li>官方建议使用卷，而不是绑定挂载。但是，绑定挂载有一个优势，就是绑定挂载可以直接将宿主机中的文件（非目录）直接挂载到容器中，比如，将宿主机中的 <code>/etc/localtime</code> 文件映射到容器中的 <code>/etc/localtime</code>文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name testAcon -v /etc/localtime:/etc/localtime alpine</span><br></pre></td></tr></table></figure><ul><li>通常，使用绑定挂载就是为了将宿主机中的配置文件挂载到容器中，如果时整个目录的数据，建议使用卷，卷只能映射目录，不能映射文件。</li></ul><h3 id="nginx示例"><a href="#nginx示例" class="headerlink" title="nginx示例"></a>nginx示例</h3><ul><li>创建容器并挂载数据卷到容器内的 HTML 目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name myng -v html:/usr/share/nginx/html -p 8080:80 -d nginx</span><br></pre></td></tr></table></figure><ul><li>进入 html 数据卷所在位置，并修改 HTML 内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /var/lib/docker/volumes/html/_data</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/a0b5136ce202500c65c8f19e8dec60ad74e5ab97.png" alt="image-20221122142358343" style="zoom:80%;" /></p><h1 id="Docker-自定义镜像"><a href="#Docker-自定义镜像" class="headerlink" title="Docker 自定义镜像"></a>Docker 自定义镜像</h1><h2 id="镜像的内部结构"><a href="#镜像的内部结构" class="headerlink" title="镜像的内部结构"></a>镜像的内部结构</h2><p>​    对于 Docker 用户来说，最好的情况是不需要自己创建镜像。几乎所有常用的数据库、中间件、应用软件等现有的 Docker 官方镜像或其他人和组织创建的镜像，我们只需要稍作配置就可以直接使用。</p><p>某些情况下我们也不得不自己构建镜像，比如：</p><ul><li>找不到现有的镜像，比如自己开发的应用程序</li><li>需要在镜像中加入特定的功能</li></ul><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>Dockersfile 是镜像的描述文件，定义了如何构建 Docker 镜像，hello-world 的 Dockerfile：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> hello /</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/hello&quot;</span>]</span></span><br></pre></td></tr></table></figure><ul><li>FROM scratch：表示镜像白手起家，从 0 开始构建</li><li>COPY hello /：将文件 ”hello“ 复制到镜像的根目录</li><li>CMD [“/hello”]：启动容器时，执行 /hello</li></ul><p>镜像 hello-world 中就只有一个可执行文件”hello“，其功能就是打印出 ”Hello from Docker….“等信息</p><h3 id="base-镜像"><a href="#base-镜像" class="headerlink" title="base 镜像"></a>base 镜像</h3><ul><li>通常来说，我们希望镜像能提供一个基本的操作系统环境，用户可以根据需要安装和配置软件。这样的镜像我们称作 base 镜像</li><li>base 镜像有两层含义：<ul><li>不依赖其他镜像，从 scratch 构建</li><li>其他镜像可以以之为基础进行扩展</li></ul></li><li>能称作 base 镜像的通常都是各种 Linux 发行版的 Docker 镜像，比如 Ubuntu、Debian、CentOS等</li><li>下载 CentOS镜像：<code>docker pull centos</code></li></ul><h3 id="CentOS-的-Dockerfile"><a href="#CentOS-的-Dockerfile" class="headerlink" title="CentOS 的 Dockerfile"></a>CentOS 的 Dockerfile</h3><p>base 镜像提供的是最小安装的 Linux发行版，CentOS 镜像的 Dockerfile 的内容：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">From</span>  scratch</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> centos-7-x86_64-docker.tar.xz /</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>]</span></span><br></pre></td></tr></table></figure><ul><li>ADD 指令添加到镜像的 tar 包就是 CentOS 7的rootfs。在制作镜像时，这个 tar 包会自动解压到 / 目录下，生成 /dev、/proc、/bin 等目录</li><li>可在Docker Hub 的镜像描述页面中查看 Dockerfile。</li></ul><h3 id="为何系统镜像如此小"><a href="#为何系统镜像如此小" class="headerlink" title="为何系统镜像如此小"></a>为何系统镜像如此小</h3><p>Linux 操作系统由内核空间和用户空间组成：</p><ul><li>内核空间是 Kernel，Linux 刚启动时会加载 bootfs 文件系统，之后 bootfs 会被卸载掉</li><li>用户空间的文件系统时 rootfs，包含我们熟悉的 /dev、/proc、/bin 等目录</li><li>对于base镜像来说，底层直接用 Host 的 kernel，自己只需要提供 rootfs 就行了</li><li>一个精简的 OS，rootfs 可以很小，只需要包括最基本的命令、工具和程序库就可以了。alpine不到10MB</li></ul><p><img src="https://i0.hdslb.com/bfs/album/357282b281f298f8248aeb38f814261a8a30c6cc.png" alt="image-20221122150704955"></p><h2 id="通过-Dockerfile-构建镜像"><a href="#通过-Dockerfile-构建镜像" class="headerlink" title="通过 Dockerfile 构建镜像"></a>通过 Dockerfile 构建镜像</h2><h3 id="Dockerfile中常用命令"><a href="#Dockerfile中常用命令" class="headerlink" title="Dockerfile中常用命令"></a>Dockerfile中常用命令</h3><p><img src="https://i0.hdslb.com/bfs/album/2463e44fd040afe1037cb1045a2e5c431ad8ed9f.png" alt="image-20221122151325794"></p><h2 id="制作-Java-应用镜像示例"><a href="#制作-Java-应用镜像示例" class="headerlink" title="制作 Java 应用镜像示例"></a>制作 Java 应用镜像示例</h2><h3 id="基于-CentOS-基础镜像构建-Java-应用镜像"><a href="#基于-CentOS-基础镜像构建-Java-应用镜像" class="headerlink" title="基于 CentOS 基础镜像构建 Java 应用镜像"></a>基于 CentOS 基础镜像构建 Java 应用镜像</h3><h4 id="1-上传-JDK"><a href="#1-上传-JDK" class="headerlink" title="1.上传 JDK"></a>1.上传 JDK</h4><p>创建文件夹，将 jdk 安装包上传到该目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /root/dockerfile/java</span><br></pre></td></tr></table></figure><h4 id="2-编写-dockerfile"><a href="#2-编写-dockerfile" class="headerlink" title="2.编写 dockerfile"></a>2.编写 dockerfile</h4><p>在 /root/dockerfile/java 目录下创建文件 dockerfile_java，内容如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="comment"># 配置环境变量，JDK的安装目录</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_DIR=/usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝 JDK 和 java项目的包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./jdk-11.0.17.tar.gz <span class="variable">$JAVA_DIR</span>/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./UpdateImg-0.0.1.jar /tmp/app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 JDK</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; tar -xf ./jdk-11.0.17.tar.gz \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; <span class="built_in">mv</span> ./jdk-11.0.17 ./java11</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java11</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴漏端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure><h4 id="3-生成镜像"><a href="#3-生成镜像" class="headerlink" title="3.生成镜像"></a>3.生成镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker build -f 文件名 -t 镜像名 .代表从当前目录</span></span><br><span class="line">docker build -f dockerfile_java -t myjava:1.0 .</span><br></pre></td></tr></table></figure><h4 id="4-验证镜像是否生成成功"><a href="#4-验证镜像是否生成成功" class="headerlink" title="4. 验证镜像是否生成成功"></a>4. 验证镜像是否生成成功</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h4 id="5-启动容器"><a href="#5-启动容器" class="headerlink" title="5. 启动容器"></a>5. 启动容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name myjava -d -p 8080:8080 myjava:1.0</span><br></pre></td></tr></table></figure><h3 id="通过-Java-镜像构建应用镜像"><a href="#通过-Java-镜像构建应用镜像" class="headerlink" title="通过 Java 镜像构建应用镜像"></a>通过 Java 镜像构建应用镜像</h3><h4 id="1-编写dockerfile"><a href="#1-编写dockerfile" class="headerlink" title="1.编写dockerfile"></a>1.编写dockerfile</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> lpicanco/java11-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./UpdateImg-0.0.1.jar /tmp/app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴漏端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></table></figure><h4 id="2-生成镜像"><a href="#2-生成镜像" class="headerlink" title="2.生成镜像"></a>2.生成镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker build -f 文件名 -t 镜像名 .代表从当前目录</span></span><br><span class="line">docker build -f dockerfile_java -t myjava:2.0 .</span><br></pre></td></tr></table></figure><h4 id="3-验证镜像是否生成成功"><a href="#3-验证镜像是否生成成功" class="headerlink" title="3.验证镜像是否生成成功"></a>3.验证镜像是否生成成功</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h4 id="4-启动容器"><a href="#4-启动容器" class="headerlink" title="4.启动容器"></a>4.启动容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name myjava2 -d -p 8081:8080 myjava:2.0</span><br></pre></td></tr></table></figure><h3 id="示例结果"><a href="#示例结果" class="headerlink" title="示例结果"></a>示例结果</h3><p><img src="https://i0.hdslb.com/bfs/album/c30920e8271c0d6201d450da80230bc35a22309b.png" alt="image-20221122171541581"></p><p><img src="https://i0.hdslb.com/bfs/album/2c3f95f8f73a6ed13afb26be8001a14b969c0507.png" alt="image-20221122171923611" style="zoom:80%;" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker入门&quot;&gt;&lt;a href=&quot;#Docker入门&quot; class=&quot;headerlink&quot; title=&quot;Docker入门&quot;&gt;&lt;/a&gt;Docker入门&lt;/h1&gt;&lt;h2 id=&quot;什么是Docker&quot;&gt;&lt;a href=&quot;#什么是Docker&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot上传照片的两种方式.md</title>
    <link href="http://example.com/posts/aff2c562.html"/>
    <id>http://example.com/posts/aff2c562.html</id>
    <published>2022-11-19T14:05:26.000Z</published>
    <updated>2022-11-22T09:26:21.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot项目图片上传"><a href="#SpringBoot项目图片上传" class="headerlink" title="SpringBoot项目图片上传"></a>SpringBoot项目图片上传</h1><h2 id="搭建一个-SpringBoot-项目"><a href="#搭建一个-SpringBoot-项目" class="headerlink" title="搭建一个 SpringBoot 项目"></a>搭建一个 SpringBoot 项目</h2><ul><li>使用 Idea 搭建一个 SpringBoot 项目</li></ul><p><img src="https://i0.hdslb.com/bfs/album/4f0d269f92ae5371864e930209f723bfb74a9217.png" alt="image-20221119170916659" style="zoom:50%;" /></p><ul><li>在 pom.xml 中导入 web 依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="将照片存储在项目的-Resource-目录下"><a href="#将照片存储在项目的-Resource-目录下" class="headerlink" title="将照片存储在项目的 Resource 目录下"></a>将照片存储在项目的 Resource 目录下</h2><ul><li>在Resource目录下有 images 文件夹和一个 static 文件夹，static下有一个upload.html文件，如下图</li></ul><p><img src="https://i0.hdslb.com/bfs/album/417885dbe8ca3ef552d0b79cbba2a077d4d97016.png" alt="image-20221119171657707"></p><ul><li>upload.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请选择您要上传的照片&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>UploaderController</p><p>为了方便演示，将业务放都在 controller 中，文件上传一般可分成：</p><ul><li>文件校验（包括不限于：图片的大小、图片的类型、图片是否为空、上传的是否是文件等）</li><li>将图片重命名，图片重命名又可分为以下几步<ul><li>获取原来文件的后缀名，可以使用<code>file.getOriginalFilename()</code>获取原来的文件名</li><li>生成一个随机的新文件名，这里可以使用<code>UUID.randomUUID()</code></li><li>把新名称和原后缀名拼接起来作为新的文件名</li></ul></li><li>把图片上传的指定的目录下，这里以Resource为例<ul><li><code>new ApplicationHome(this.getClass())</code>可以获取当前程序运行的主页</li><li>我们知道Java程序都是运行的.class字节码文件，所以<code>getDir()</code>获取文件夹位置其实是.class字节码文件的位置，需要使用<code>getParentFile()</code>两次回到项目的主目录</li><li>获取到主目录的绝对路径拼接上从这里到Resource下的images</li><li>最后通过<code>file.transferTo(new File(path));</code>把文件上传到Resource下的images目录，并且返回一个url地址</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.cug.updateimg.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.cug.updateimg.util.UploadUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.system.ApplicationHome;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*也可使用 Controller，但是需要再加 ResponseBody*/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file)</span>&#123;</span><br><span class="line">        <span class="comment">// 图片校验（图片是否为空,图片大小，上传的是不是图片、图片类型（例如只能上传png）等等）</span></span><br><span class="line">        <span class="keyword">if</span>(file.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;图片文件格式错误&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 可以自己加一点校验 例如上传的是不是图片或者上传的文件是不是png格式等等 这里省略</span></span><br><span class="line">        <span class="comment">// 图片重命名，防止同命名文件相互覆盖</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename(); <span class="comment">//  原来照片的名字</span></span><br><span class="line">        String[] temp = originalFilename.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ext</span> <span class="operator">=</span> <span class="string">&quot;.&quot;</span> + temp[temp.length-<span class="number">1</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> uuid + ext;</span><br><span class="line">        <span class="comment">//上传图片</span></span><br><span class="line">        <span class="type">ApplicationHome</span> <span class="variable">applicationHome</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplicationHome</span>(<span class="built_in">this</span>.getClass());</span><br><span class="line">        <span class="type">String</span> <span class="variable">pre</span> <span class="operator">=</span> applicationHome.getDir().getParentFile().getParentFile().getAbsolutePath() +</span><br><span class="line">                <span class="string">&quot;/src/main/resources/images/&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> pre + fileName;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(path));</span><br><span class="line">            <span class="keyword">return</span> path;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;照片上传失败&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="tip error"><p>遇到如下错误</p><p><img src="https://i0.hdslb.com/bfs/album/d448ccfe28c19bd0b33597e34637763970eab645.png" alt="前端报错情况"></p><ul><li>错误出现的原因：跳转页面的 url 无对应的值<ul><li><b>Application</b> 启动类的位置不对。要将 Application 类放在最外层，即包含所有子包，因为 Spring-boot 会自动加载启动类所在包下及其子包的所有组件</li><li>在 SpringBoot 的配置文件： application.yml 和 application.properties 中关于视图解析器的配置问题：<ul><li>当 pom 文件下的 spring-boot-starter-parent 版本高时使用： spring.mvc.view.prefix/spring.mvc.view.suffix</li><li>当 pom 文件下的 spring-boot-starter-parent 版本低时使用： spring.view.prefix/spring.view.suffix</li></ul></li><li>控制器的 URL 路径书写问题。 @RequestMapping(“XXXXXX”)中的路径与实际访问路径不符合</li></ul></li></ul><p><img src="https://i0.hdslb.com/bfs/album/0312f27cf18b67192e9347b312c8fb5360edef55.png" alt="后端报错情况"></p><ul><li>错误出现原因：存储照片的路径中缺少某个或多个文件</li><li>解决方法：创建缺少的问题即可</li></ul></div><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><ul><li>前端：返回上传照片的路径</li></ul><p><img src="https://i0.hdslb.com/bfs/album/6b913a46d47acfd85362f7bc7f808291dde65433.png" alt="image-20221119172845000" style="zoom:50%;" /></p><ul><li>成功上传到指定的 resource 文件夹下</li></ul><p><img src="https://i0.hdslb.com/bfs/album/204bd3ad7d630e75b43d26418ab7084d61858752.png" alt="image-20221119172937136" style="zoom:50%;" /></p><h2 id="OSS对象存储（以阿里云服务器为例）"><a href="#OSS对象存储（以阿里云服务器为例）" class="headerlink" title="OSS对象存储（以阿里云服务器为例）"></a>OSS对象存储（以阿里云服务器为例）</h2><p><img src="https://i0.hdslb.com/bfs/album/6ca616282e2daa80b4a31982db33badc1395ff2c.png" alt="image-20221117231501165" style="zoom:50%;" /></p><p>​    因为目前多数项目为分布式服务，若将用户上传的文件（照片）存储在用户当前访问的服务器（如上图的服务器A）上，当用户下次通过别的服务器（服务器B C D ）提供服务时，则将无法读取到正确的已上传文件。针对这种情况，可以将用户上传的文件（照片）单独存储在另外一台存储服务器上，无论用户通过哪台服务器使用服务，都不会影响用户访问已上传文件。</p><ul><li>创建 Bucket<ul><li>名称：随便起</li><li>地域：想你的服务器在哪就选哪个（也是随便选）</li><li>存储类型：标准存储</li><li>冗余存储：关闭</li><li>版本控制：关闭</li><li>读写权限：公共读写</li></ul></li></ul><p>创建成功后的界面：</p><p><img src="https://i0.hdslb.com/bfs/album/bf354bfe3b090a60f7fa619daa78fe6a50bf0e7c.png" alt="image-20221119174131704" style="zoom: 50%;" /></p><ul><li><p>代码</p><ul><li>导入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>新建一个工具类UploadUtil在util包下</p><ul><li>需要获取几个参数<ul><li>阿里域名（开头加<a href="https://，结尾加/）">https://，结尾加/）</a></li><li>地域节点（开头加http://）</li><li>accessKeyId</li><li>accessKeySecret</li></ul></li><li>生成一个新的文件名</li><li>使用OSS客户端对象上传图片返回url</li></ul><p>UploadUtil:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> edu.cug.updateimg.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSS;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FilenameUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadUtil</span> &#123;</span><br><span class="line">    <span class="comment">// 阿里域名 + 存储文件名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ALI_DOMAIN</span> <span class="operator">=</span> <span class="string">&quot;https://liam-test.oss-cn-hangzhou.aliyuncs.com/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">uploadImage</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// file 校验</span></span><br><span class="line">        <span class="keyword">if</span>(file.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;图片文件格式错误&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 生成文件名，防止file重命名，防止同命名文件相互覆盖</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename(); <span class="comment">//  原来照片的名字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ext</span> <span class="operator">=</span> <span class="string">&quot;.&quot;</span> + FilenameUtils.getExtension(originalFilename);</span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;demo/&quot;</span>+uuid + ext;</span><br><span class="line">        <span class="comment">// 地域结点</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;http://oss-cn-hangzhou.aliyuncs.com&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKetId</span> <span class="operator">=</span> <span class="string">&quot;LTAI5tLBc1MrL9dkQUy4NGrr&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> <span class="string">&quot;buRV3aInpFxHtUnfBvYMoMLgsiF1VG&quot;</span>;</span><br><span class="line">        <span class="comment">//OSS客户端对象</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClient</span>(endpoint, accessKetId, accessKeySecret);</span><br><span class="line">        ossClient.putObject(</span><br><span class="line">                <span class="string">&quot;liam-test&quot;</span>, <span class="comment">//仓库名</span></span><br><span class="line">                fileName, <span class="comment">// 文件名</span></span><br><span class="line">                file.getInputStream()</span><br><span class="line">        );</span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">        <span class="keyword">return</span> ALI_DOMAIN + fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upImg&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">upImg</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> UploadUtil.uploadImage(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>upload.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/upImg&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传图片&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><ul><li>前端：返回上传照片的路径</li></ul><p><img src="https://i0.hdslb.com/bfs/album/16431b844e78f0cdaa6941dff2789eb6b87fcf19.png" alt="image-20221119174620478" style="zoom:50%;" /></p><ul><li>上传文件到指定阿里云文件夹下</li></ul><p><img src="https://i0.hdslb.com/bfs/album/b5fa8dd0b243b4ac99aaa8f544ec44a1258a768a.png" alt="image-20221119174724070" style="zoom:50%;" /></p><h2 id="使用API测试工具进行测试"><a href="#使用API测试工具进行测试" class="headerlink" title="使用API测试工具进行测试"></a>使用API测试工具进行测试</h2><ul><li><p>测试存储到 Resource 目录下</p><ul><li>设置请求头==Content-Type=multipart/form-data==</li></ul><p><img src="https://i0.hdslb.com/bfs/album/508e7d04c975090edd112eb9752c8a2fb57cd6e4.png" alt="image-20221119175533759"></p><ul><li>设置请求体</li></ul><p><img src="https://i0.hdslb.com/bfs/album/a52f7e03dde95ce16d8453fe4dabe14846caadcc.png" alt="image-20221119175711295"></p></li></ul><ul><li><p>测试 OSS 对象存储</p><ul><li>设置请求头==Content-Type=multipart/form-data==</li></ul><p><img src="https://i0.hdslb.com/bfs/album/bad67d65a093f1a2e452b8fecaa055a864e371b8.png" alt="image-20221119175049182"></p><ul><li>设置请求体</li></ul><p><img src="https://i0.hdslb.com/bfs/album/ccdb2a9ea6b0670ff6e1c52c4bb21b38af0b073e.png" alt="image-20221119175349975"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot项目图片上传&quot;&gt;&lt;a href=&quot;#SpringBoot项目图片上传&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot项目图片上传&quot;&gt;&lt;/a&gt;SpringBoot项目图片上传&lt;/h1&gt;&lt;h2 id=&quot;搭建一个-Spri</summary>
      
    
    
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
    <category term="OSS对象存储" scheme="http://example.com/tags/OSS%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.2-Ref、Reactive学习</title>
    <link href="http://example.com/posts/4f9d0a8d.html"/>
    <id>http://example.com/posts/4f9d0a8d.html</id>
    <published>2022-10-01T11:06:58.000Z</published>
    <updated>2022-11-22T09:26:21.358Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ref-全家桶"><a href="#Ref-全家桶" class="headerlink" title="Ref 全家桶"></a>Ref 全家桶</h3><ul><li><strong>ref</strong></li></ul><ol><li><p>接受一个內部值并返回一个响应式且可变的ref对象；</p></li><li><p>取值、赋值都需要加 .value</p></li><li><p>可以拿到 HTML 页面元素</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div ref=&quot;dom&quot;&gt;我是dom&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;changeAttr&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">    import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">    const dom = ref&lt;HTMLDialogElement&gt;();</span><br><span class="line">    const changeAttr = () =&gt;&#123;</span><br><span class="line">    console.log(dom.value?.innerText);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p><strong>isRef</strong></p><p>判断是不是一格 ref 对象</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, <span class="title class_">Ref</span>,isRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">message</span>: <span class="title class_">Ref</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt; = <span class="title function_">ref</span>(<span class="string">&quot;我是message&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">notRef</span>:<span class="built_in">number</span> = <span class="number">123</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeMsg</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  message.<span class="property">value</span> = <span class="string">&quot;change msg&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isRef</span>(message)); <span class="comment">//true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isRef</span>(notRef)); <span class="comment">//false </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>shallowRef</strong></li></ul><ol><li><p>创建一个跟踪自身 .value 变化的 ref，但不会使其值也变成响应式</p></li><li><p>会受到 ref 对象<strong>页面更新</strong>的影响</p></li></ol><ul><li><p><strong>triggerRef</strong></p><p>强制更新页面DOM，可以更新 shallowRef 对象的页面值</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;changeMsg&quot;&gt;change&lt;/button&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; Ref, shallowRef,triggerRef &#125; from &#x27;vue&#x27;</span><br><span class="line">type Obj = &#123;</span><br><span class="line">  name: string</span><br><span class="line">&#125;</span><br><span class="line">let message: Ref&lt;Obj&gt; = shallowRef(&#123;</span><br><span class="line">  name: &#x27;Liam&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">const changeMsg = () =&gt; &#123;</span><br><span class="line">message.value.name = &#x27;Change Liam&#x27;;</span><br><span class="line">triggerRef(message)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><ul><li><p><strong>customRef</strong></p><p>自定义 ref，customRef 是个工厂函数要求我们返回一个对象 并且实现 get 和 set 方法，适合去做防抖之类的</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; customRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title class_">MyRef</span>&lt;T&gt;(<span class="attr">value</span>: T) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">timer</span>: <span class="built_in">any</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">customRef</span>( <span class="function">(<span class="params">track, trigger</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="title function_">track</span>()</span><br><span class="line">                <span class="keyword">return</span> value</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">                <span class="comment">// 防抖</span></span><br><span class="line">                <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">                timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;触发了&quot;</span>);</span><br><span class="line">                    value = newVal;</span><br><span class="line">                    timer = <span class="literal">null</span>;</span><br><span class="line">                    <span class="title function_">trigger</span>()</span><br><span class="line">                &#125;, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">MyRef</span>&lt;<span class="title class_">String</span>&gt;(<span class="string">&quot;customRef&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改属性值</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">change</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">obj.<span class="property">value</span> = <span class="string">&quot;修改后的customRef&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reactive-全家桶"><a href="#Reactive-全家桶" class="headerlink" title="Reactive 全家桶"></a>Reactive 全家桶</h3><ul><li><strong>reactive</strong></li></ul><ol><li><p>支持应用类型：Array Object Map Set等；</p></li><li><p>取值、赋值不需要 .value；</p></li><li><p>reactive 返回的是 proxy，不能直接赋值 否则破坏响应式对象</p><p>解决方案1：使用 “push + 解构” 的方式</p></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = reactive&lt;<span class="title class_">String</span>[]&gt;([])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [<span class="string">&#x27;EDG&#x27;</span>, <span class="string">&#x27;RNG&#x27;</span>, <span class="string">&#x27;JDG&#x27;</span>]</span><br><span class="line">    <span class="comment">//list = res; 直接赋值会破坏响应式对象</span></span><br><span class="line">    list.<span class="title function_">push</span>(...res);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        解决方案2：添加一个对象，把数组作为一个属性去解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;(item, index) in list.arr&quot; :key=&quot;index&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;button @click=&quot;add_&quot;&gt;添加&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">    let list = reactive&lt;&#123;arr: String[]&#125;&gt;(&#123;arr: []&#125;)</span><br><span class="line">    const add_ = () =&gt; &#123;</span><br><span class="line">        setTimeout(()=&gt;&#123;</span><br><span class="line">          let res = [&#x27;EDG&#x27;, &#x27;RNG&#x27;, &#x27;JDG&#x27;];</span><br><span class="line">          list.arr = res;</span><br><span class="line">          console.log(list);</span><br><span class="line">        &#125;, 2000)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>readonly</strong></li></ul><ol><li>将对象转化为只读属性</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;Liam&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> read = <span class="title function_">readonly</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">show</span> = (<span class="params"></span>) =&gt;&#123;</span><br><span class="line">    read.<span class="property">name</span> = <span class="string">&quot;修改后的Liam&quot;</span>; <span class="comment">//错误：readonly 对象无法赋值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj,read);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>若对源对象进行赋值操作，会影响到 readonly 对象属性值</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;Liam&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> read = <span class="title function_">readonly</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">show</span> = (<span class="params"></span>) =&gt;&#123;</span><br><span class="line">    obj.<span class="property">name</span> = <span class="string">&quot;change Liam&quot;</span>; <span class="comment">//修改 obj 对象的属性值 会影响到 read 对象属性值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj,read);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>shallowReactive</strong></li></ul><ol><li>与 shallowRef 类似，作用域只到第一个属性 .value</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj2 = <span class="title function_">shallowReactive</span>(&#123;</span><br><span class="line">    <span class="attr">foo</span>: &#123;</span><br><span class="line">        <span class="attr">bar</span>:&#123;</span><br><span class="line">            <span class="attr">num</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">edit</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    obj2.<span class="property">foo</span>.<span class="property">bar</span>.<span class="property">num</span> = <span class="number">3</span>; <span class="comment">//打印结果修改了，但显示并未修改</span></span><br><span class="line">    obj2.<span class="property">foo</span> = &#123;<span class="attr">name</span>:<span class="string">&#x27;Liam&#x27;</span>&#125;; <span class="comment">//响应式修改</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>会收到 reactive 页面更新的影响</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    reactive: &#123;&#123;obj1&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    shallowReactive: &#123;&#123;obj2&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;edit&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">  const obj1 = reactive(&#123;name: &#x27;Liam&#x27;&#125;)</span><br><span class="line">  const obj2: any = shallowReactive(&#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      bar:&#123;</span><br><span class="line">        num: 1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  const edit = () =&gt; &#123;</span><br><span class="line">    obj1.name = &#x27;我要改啦&#x27;,</span><br><span class="line">    obj2.foo.bar.num = &#x27;我被影响啦&#x27;,</span><br><span class="line">    console.log(obj2);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="to全家桶"><a href="#to全家桶" class="headerlink" title="to全家桶"></a>to全家桶</h3><ul><li><p><strong>toRef</strong></p><p>只能修改响应式对象的值，非响应式试图无变化：如果原始对象是非响应式的就不会更新视图，但数据实际上是发生变化的，如果原始对象是响应式的是会更新视图并且改变数据的</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt; &#123;&#123;man&#125;&#125; &lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">  import &#123; reactive, toRef &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">  const man = reactive(&#123;name: &#x27;Liam&#x27;, age: 22, like: &#x27;JK&#x27;&#125;);</span><br><span class="line">  const like = toRef(man,&#x27;like&#x27;);</span><br><span class="line">  </span><br><span class="line">  const change = () =&gt; &#123;</span><br><span class="line">    man.like = &#x27;洛丽塔&#x27;;</span><br><span class="line">    console.log(man);   </span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>toRef源码解析</strong>  </p><p>​    如果是 ref 对象直接返回，否则调用 ObjectRefImpl 创建一个类 ref 对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> toRef&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>, K <span class="keyword">extends</span> keyof T&gt;(</span><br><span class="line">  <span class="attr">object</span>: T,</span><br><span class="line">  <span class="attr">key</span>: K,</span><br><span class="line">  defaultValue?: T[K]</span><br><span class="line">): <span class="title class_">ToRef</span>&lt;T[K]&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> val = <span class="built_in">object</span>[key]</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">isRef</span>(val)</span><br><span class="line">    ? val</span><br><span class="line">    : (<span class="keyword">new</span> <span class="title class_">ObjectRefImpl</span>(<span class="built_in">object</span>, key, defaultValue) <span class="keyword">as</span> <span class="built_in">any</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    类 ref 对象只是做了值得改变，并未处理 “收集依赖” 和 “触发依赖” 的过程，所以普通对象无法更新视图</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ObjectRefImpl</span>&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>, K <span class="keyword">extends</span> keyof T&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isRef = <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> _object: T,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> _key: K,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> _defaultValue?: T[K]</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> val = <span class="variable language_">this</span>.<span class="property">_object</span>[<span class="variable language_">this</span>.<span class="property">_key</span>]</span><br><span class="line">    <span class="keyword">return</span> val **= <span class="literal">undefined</span> ? (<span class="variable language_">this</span>.<span class="property">_defaultValue</span> <span class="keyword">as</span> T[K]) : val</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_object</span>[<span class="variable language_">this</span>.<span class="property">_key</span>] = newVal</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>toRefs</strong></p><p>可以帮我们批量创建 ref 对象，主要是方便我们结构使用</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;name&#125;&#125; - &#123;&#123;age&#125;&#125; - &#123;&#123;like&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">  import &#123; reactive, toRef &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">  const man = reactive(&#123;name: &#x27;Liam&#x27;, age: 22, like: &#x27;JK&#x27;&#125;);</span><br><span class="line">  </span><br><span class="line">  const toRefs = &lt;T extends object&gt;(object: T) =&gt; &#123;</span><br><span class="line">    const map: any = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    for (let key in object)&#123;</span><br><span class="line">      map[key] = toRef(object, key);</span><br><span class="line">    &#125;</span><br><span class="line">    return map;</span><br><span class="line">  &#125;</span><br><span class="line">  const &#123;name, age, like&#125; = toRefs(man)</span><br><span class="line">  const change = () =&gt; &#123;</span><br><span class="line">    console.log(name, age, like);   </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>toRefs 源码解析</strong></p><p>​    其实就是把 reactive 对象的每一个属性都变成了 ref 对象循环调用 toRef</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">ToRefs</span>&lt;T = <span class="built_in">any</span>&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof T]: <span class="title class_">ToRef</span>&lt;T[K]&gt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> toRefs&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt;(<span class="attr">object</span>: T): <span class="title class_">ToRefs</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (__DEV__ &amp;&amp; !<span class="title function_">isProxy</span>(<span class="built_in">object</span>)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`toRefs() expects a reactive object but received a plain one.`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">ret</span>: <span class="built_in">any</span> = <span class="title function_">isArray</span>(<span class="built_in">object</span>) ? <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="built_in">object</span>.<span class="property">length</span>) : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="built_in">object</span>) &#123;</span><br><span class="line">    ret[key] = <span class="title function_">toRef</span>(<span class="built_in">object</span>, key)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>toRaw</strong></p><p>将响应式对象转化为普通对象</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt; &#123;&#123;man&#125;&#125; &lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">  import &#123; reactive, toRaw, toRef &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">  const man = reactive(&#123;name: &#x27;Liam&#x27;, age: 22, like: &#x27;JK&#x27;&#125;);</span><br><span class="line"></span><br><span class="line">  const change = () =&gt; &#123;</span><br><span class="line">    console.log(man, toRaw(man));</span><br><span class="line">    console.log(man, man[&#x27;__v_raw&#x27;]); //源码实现方式</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>toRaw 源码解析</strong></p><p>​    通过 ReactiveFlags 枚举值 取出 proxy 对象的 原始对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">ReactiveFlags</span> &#123;</span><br><span class="line">  <span class="variable constant_">SKIP</span> = <span class="string">&#x27;__v_skip&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">IS_REACTIVE</span> = <span class="string">&#x27;__v_isReactive&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">IS_READONLY</span> = <span class="string">&#x27;__v_isReadonly&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">IS_SHALLOW</span> = <span class="string">&#x27;__v_isShallow&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">RAW</span> = <span class="string">&#x27;__v_raw&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> toRaw&lt;T&gt;(<span class="attr">observed</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">const</span> raw = observed &amp;&amp; (observed <span class="keyword">as</span> <span class="title class_">Target</span>)[<span class="title class_">ReactiveFlags</span>.<span class="property">RAW</span>]</span><br><span class="line">  <span class="keyword">return</span> raw ? <span class="title function_">toRaw</span>(raw) : observed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Ref-全家桶&quot;&gt;&lt;a href=&quot;#Ref-全家桶&quot; class=&quot;headerlink&quot; title=&quot;Ref 全家桶&quot;&gt;&lt;/a&gt;Ref 全家桶&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ref&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;</summary>
      
    
    
    
    
    <category term="Vue3" scheme="http://example.com/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>Quasar项目如何使用Electron打包</title>
    <link href="http://example.com/posts/15bb80f9.html"/>
    <id>http://example.com/posts/15bb80f9.html</id>
    <published>2022-09-06T20:29:22.000Z</published>
    <updated>2022-11-22T09:26:21.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p>  <a href="https://quasar.dev/">https://quasar.dev/</a></p><h2 id="Quasar项目-Vite版-使用Electron开发、打包、发布"><a href="#Quasar项目-Vite版-使用Electron开发、打包、发布" class="headerlink" title="Quasar项目(Vite版)使用Electron开发、打包、发布"></a>Quasar项目(Vite版)使用Electron开发、打包、发布</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li><p>创建Vite版本的 Quasar 项目</p><p><img src="https://i0.hdslb.com/bfs/album/55188e884d46128893044a630cc5f8db83002ced.png" alt="image-20220906195333774"></p><p>文件目录：</p><p><img src="https://i0.hdslb.com/bfs/album/ea49ab7a3fb1dcb78fc8bbf98791cba259bf2342.png" alt="image-20220906195443520"></p></li><li><p>在项目根目录下安装最新的 Electron 模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from the root of Quasar project</span></span><br><span class="line">$ <span class="built_in">cd</span> qua-vite</span><br><span class="line">$ npm install electron@latest</span><br><span class="line"><span class="comment"># or yarn upgrade electron@latest</span></span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/9bd0d9b2fa68b7e2cbf39ae9f46cbb801248e6d7.png" alt="image-20220906144407784"></p></li><li><p>将 Electron 模块添加到 Quasar 项目中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ quasar mode add electron</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/6d329e2c9261c08f28b282752ce0b84c002406dc.png" alt="image-20220906145603323"></p><div class="tip info"><ol><li>该命令会安装一些 Electron 安装包，同时创建 <code>/src-electron</code> 安装包。</li><li>每个 Election APP 有两个线程：主线程（处理新创建的 <code>/src-electron</code> 文件中窗口和初始化代码）和渲染线程（处理 <code>/src</code> 中应用程序的实际内容）</li><li>如果在使用 <code>npm</code> 安装过程中出现错误：① 检查自己的 <code>npm</code> 版本是否过期；② 如果自己电脑上没有安装过像 Python、Visual Studio 等开发工具，需要安装相关Visual C++ 文件，可自行百度相关解决办法。</li></ol></div></li></ol><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><p><strong>Windows桌面端</strong> ： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ quasar build</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/aa681f8492f623cd023a13331f448b47c2eb863f.png" alt="image-20220906195938513"></p><p><img src="https://i0.hdslb.com/bfs/album/59b5f9926b4ad754ba49c78fbc0fe6d7fc8df6ab.png" alt="image-20220906202043311"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ quasar dev -m electron</span><br><span class="line"></span><br><span class="line"><span class="comment"># passing extra parameters and/or options to</span></span><br><span class="line"><span class="comment"># underlying &quot;electron&quot; executable:</span></span><br><span class="line">$ quasar dev -m electron -- --no-sandbox --disable-setuid-sandbox</span><br><span class="line"><span class="comment"># when on Windows and using Powershell:</span></span><br><span class="line">$ quasar dev -m electron <span class="string">&#x27;--&#x27;</span> --no-sandbox --disable-setuid-sandbox</span><br></pre></td></tr></table></figure><p>​    上述命令执行之后将会打开一个 带有开发工具的 Electron 窗口。该窗口的渲染进程具有“热更新”功能，并且对主进程的更改也会被检测到(但是会在每次更改时重新启动 Electron 窗口)</p><p><img src="https://i0.hdslb.com/bfs/album/faf9cb0529ae63b2df63d5467ccb923a1d7cb271.png" alt="image-20220906151016209"></p><p>PS：热更新，即前端代码发生变化，前端页面也会变化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if you want to also access Vue Devtools for the renderer thread:</span></span><br><span class="line">$ quasar dev -m electron --devtools</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/670f273d48093b60b1ada6a2e3d11cdbf53290ca.png" alt="image-20220906172222692"></p><div class="tip error"><p>执行过程中遇到如下错误</p></div><p><img src="https://i0.hdslb.com/bfs/album/bf114dbda40e561eeac8409beee74bfdb1e93e9d.png" alt="image-20220906172337146"></p><p>解决方法：建议换源，重新执行命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config <span class="built_in">set</span> ELECTRON_MIRROR http://npm.taobao.org/mirrors/electron/</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/3a1751b5932fc03b916718a5952c6ecb51947523.png" alt="image-20220906172511956"></p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p><strong>Windows桌面端：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ quasar build -m electron</span><br><span class="line"></span><br><span class="line"><span class="comment"># ..or the longer form:</span></span><br><span class="line">$ quasar build --mode electron</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/b91effe7a79b2a0568e14d23aa773a59c5eb2e9b.png" alt="image-20220906200128209"></p><p><img src="https://i0.hdslb.com/bfs/album/4f9e367329fc438a300f6488d14721818142277f.png" alt="image-20220906202520531"></p><p>​    上述命令可以将app项目打包成产品并且使用electron包将其打包成可执行文件。如果希望为 UI 代码启用调试的生产版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ quasar build -m electron -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># ..or the longer form</span></span><br><span class="line">$ quasar build -m electron --debug</span><br></pre></td></tr></table></figure><h3 id="发布-学习中…"><a href="#发布-学习中…" class="headerlink" title="发布 - 学习中…"></a>发布 - 学习中…</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ quasar build -m electron -P always</span><br><span class="line"></span><br><span class="line"><span class="comment"># ..or the longer form:</span></span><br><span class="line">$ quasar build --mode electron --publish always</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/7d1c8d4c94a0388748686a5d9c31e4c893bf790f.png" alt="image-20220906193519004"></p><p>​    使用 <code>electron-builder</code> 来构建app。可以直接使用命令行(—bundler builder) 或 直接在 <code>quasar.config.js</code> 中 <code>electron.bundler</code> 部分设置。<strong><em>在使用 electron-packager 时这个方法是无效的</em></strong>。<img src="https://i0.hdslb.com/bfs/album/5685ea7e8db762cbebaee9e70436d2ad7187bf39.png" alt="image-20220906200341265"></p><p>​    合法的 <code>-P</code> 有 “onTag”, “onTagOrDraft”, “always” 和 “never”，另外 <code>quasar.config.js</code> 中的 <code>electron.builder</code> 必须具有有效的发布配置说明。</p><p>​    将 Windows EXE 安装文件发布到 Amazon S3的一个非常基本的配置如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// quasar.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="attr">electron</span>: &#123;</span><br><span class="line">  <span class="attr">bundler</span>: <span class="string">&#x27;builder&#x27;</span>, <span class="comment">// set here instead of using command line flag --bundler</span></span><br><span class="line">  <span class="attr">builder</span>: &#123;</span><br><span class="line">    <span class="attr">appId</span>: <span class="string">&#x27;com.electron.myelectronapp&#x27;</span>,</span><br><span class="line">    <span class="attr">win</span>: &#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;nsis&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">publish</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;provider&#x27;</span>: <span class="string">&#x27;s3&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;bucket&#x27;</span>: <span class="string">&#x27;myS3bucket&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/90ac4c8f1b9632a0db4a71863d7507af60728cfa.png" alt="image-20220906201630927"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;官方文档&quot;&gt;&lt;a href=&quot;#官方文档&quot; class=&quot;headerlink&quot; title=&quot;官方文档&quot;&gt;&lt;/a&gt;官方文档&lt;/h2&gt;&lt;p&gt;  &lt;a href=&quot;https://quasar.dev/&quot;&gt;https://quasar.dev/&lt;/a&gt;&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    
    <category term="Quasar开发" scheme="http://example.com/tags/Quasar%E5%BC%80%E5%8F%91/"/>
    
    <category term="Vite" scheme="http://example.com/tags/Vite/"/>
    
    <category term="Electron" scheme="http://example.com/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>Typora+Bilibili免费图床方法</title>
    <link href="http://example.com/posts/85bf8f13.html"/>
    <id>http://example.com/posts/85bf8f13.html</id>
    <published>2022-08-28T23:39:05.000Z</published>
    <updated>2022-11-22T09:26:21.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Typora-Bilibili免费图床方法"><a href="#Typora-Bilibili免费图床方法" class="headerlink" title="Typora+Bilibili免费图床方法"></a>Typora+Bilibili免费图床方法</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>​    在使用Typora写完博客时，需要发布到自己的主站（Github、csdn等）时，会发现发布之后<strong>照片损坏失效或加载速度很慢</strong>。如何解决这个问题呢？</p><p>​    目前有很多方法可以解决此类问题，普遍是选择上传图片，上传到Github服务器，但这种方法有时候图片加载很慢。同时目前gitee公开的仓库需要审查，很不方便。</p><p>​    依照这个思路，找到了一个可以将图片上传到bilibili服务器的方法。准所周知，b站看*指日可待，但永远不会倒闭。所以，该方法免费且快！</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>​    Windows 10        Typora 0.9.86</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h4 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h4><ul><li><p>去GitHub下载插件<a href="https://github.com/xlzy520/typora-plugin-bilibili![插件仓库](https://i0.hdslb.com/bfs/album/19ce68a352dd910d830935497d16e4dd932cf261.png">https://github.com/xlzy520/typora-plugin-bilibili![插件仓库](https://i0.hdslb.com/bfs/album/19ce68a352dd910d830935497d16e4dd932cf261.png</a>)</p><p>下载完成后，解压文件中的 <code>main.exe</code> 文件，将其解压到你指定文件目录底下（<strong>这个文件目录很重要后续会使用到，且目录文件中不能含有空格</strong>），建议将其放在Typora同目录下。我将其放在了 <code>D:\mingw64\picgo</code> 之下（不要问，问就是Typora安装路径上有空格文件！！）</p><p><img src="https://i0.hdslb.com/bfs/album/a9a79da2e7d83e483d2d91ed300cc5a3b1bdca02.png" alt="image-20220829001142563"></p></li><li><p>网页端打开 <code>bilibili</code> 官网，登录自己的账号之后，然后按 <code>F12</code>（或者 <code>Fn+F12</code> ），进行如下操作，复制 <code>SESSDATA</code> 。<img src="https://i0.hdslb.com/bfs/album/2a28618f4fa98da8b21ce51eabd792f8a1e857a7.png" alt="image-20220829003252822"></p></li></ul><h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h4><ul><li><p>打开 <code>Typora</code> 软件，进行如下操作：</p><p><img src="https://i0.hdslb.com/bfs/album/8d93e28a9177124ac8cbfb655457fda0002791f2.png" alt="Typora界面"></p><p><img src="https://i0.hdslb.com/bfs/album/36d32f9258778a1c07c8677699683132de335323.png" alt="image-20220829002808222"></p></li><li><p>将 <code>main.exe</code> 的目录地址 <code>bilibili</code> 网页端拿到的 <code>SESSDATA</code> 码进行组合，格式如下：<code>D:\mingw64\picgo\main.exe token=0dd3e50****(这是自己的SESSDATA码)</code> ，将组合后的字符串放到 <code>偏好设置\图像\上传服务器设定\自定义命令</code> 中，如下图所示：<img src="https://i0.hdslb.com/bfs/album/b4a3c84ef9c8831d533ab0c3b2be19be94264943.png" alt="image-20220829004039538"></p><h4 id="3-完成"><a href="#3-完成" class="headerlink" title="3.完成"></a>3.完成</h4></li></ul><p>​    完成上述配置步骤后，点击 <code>验证图片上传选项</code> 验证是否配置成功，如下图为配置成功显示内容。<img src="https://i0.hdslb.com/bfs/album/573cfa3d63a97c6ec022b850d2374b477492d40b.png" alt="image-20220829004250253"></p><p>​    <strong>！！重点 重点！！</strong></p><p>​    上述配置完成之后，若发布到自己博客上之后还是无法显示照片时，需要在自己搭建博客的 html页面增加 <code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;</code> 那么全站资源引用不会携带 <code>referrer</code> 。比如我需要在自己博客主题配置文件 <code>_config.butterfly.yml</code> 配置文件中添加代码。<img src="https://i0.hdslb.com/bfs/album/be35b43b5205763050720de6f6bcdab4bcfdb96a.png" alt="image-20220829101614441"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    本片博客主要解决了Typora使用中图片失效或加载速度慢的问题，主要使用了 <code>Custom Command</code> 方法解决这一问题。除此之外，还可以使用 PicGo(App) 的方法来解决这一问题，此篇博客不再赘述，有需要的小伙伴可自行搜索。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Typora-Bilibili免费图床方法&quot;&gt;&lt;a href=&quot;#Typora-Bilibili免费图床方法&quot; class=&quot;headerlink&quot; title=&quot;Typora+Bilibili免费图床方法&quot;&gt;&lt;/a&gt;Typora+Bilibili免费图床方法&lt;/</summary>
      
    
    
    
    
    <category term="Typora" scheme="http://example.com/tags/Typora/"/>
    
    <category term="Bilibili" scheme="http://example.com/tags/Bilibili/"/>
    
    <category term="图床" scheme="http://example.com/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
</feed>
