<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liam&#39;s Blog</title>
  
  <subtitle>生活明朗，万物可爱。</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-01T13:47:07.810Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Liam</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Markdown简单使用</title>
    <link href="http://example.com/posts/87c20598.html"/>
    <id>http://example.com/posts/87c20598.html</id>
    <published>2022-10-01T13:47:07.810Z</published>
    <updated>2022-10-01T13:47:07.810Z</updated>
    
    <content type="html"><![CDATA[<p>1.高亮: ==文字==<br>2.标题: #文字 ##文字 ###文字 最多支持6级的标题<br>3.加粗: <strong>文字</strong><br>4.斜体: <em>文字</em><br>5.上标: ^文字^<br>6.下标: ~文字~<br>7.列表: +文字   在+号前加两个空格可以实现下一级列表<br>8.表格:<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| 文字 | 文字 | 文字 |</span><br><span class="line">| ---- | ---- | ---- |</span><br><span class="line">| 文字 | 文字 | 文字 |</span><br></pre></td></tr></table></figure><br>9.引用: &gt;文字 &gt;&gt;文字 &gt;&gt;&gt;文字    打几个就可以实现几级的引用<br>10.代码框:  ‘文字’    ‘’’ 文字’’’</p><p>==（1）标题==</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><p>==（2）字体==</p><p><strong>加粗</strong></p><p><em>斜体</em></p><p><strong><em>斜体加粗</em></strong></p><p><del>删除线</del> </p><p>==高亮==</p><p>我是^上标^</p><p>我是~下标~</p><p>==（3）列表==</p><ul><li>一二三四五<ul><li>上山打老虎<ul><li>老虎没打到<ul><li>打到小松鼠</li></ul></li></ul></li></ul></li></ul><p>1.一二三四五</p><p>2.上山打老虎</p><p>3.老虎没打到</p><p>4.打到小松鼠</p><p>==（4）表格==</p><div class="table-container"><table><thead><tr><th style="text-align:center">Mon</th><th style="text-align:center">Tue</th><th style="text-align:center">WED</th><th style="text-align:center">THU</th><th style="text-align:center">FRI</th></tr></thead><tbody><tr><td style="text-align:center">上山</td><td style="text-align:center">上山</td><td style="text-align:center">上山</td><td style="text-align:center">上山</td><td style="text-align:center">上山</td></tr><tr><td style="text-align:center">打老虎</td><td style="text-align:center">打老虎</td><td style="text-align:center">打老虎</td><td style="text-align:center">打老虎</td><td style="text-align:center">打老虎</td></tr></tbody></table></div><p>==（5）引用==</p><blockquote><p>一二三四五 </p><blockquote><p>上山打老虎 </p><blockquote><p>老虎没打到 </p><blockquote><p>打到小松鼠</p></blockquote></blockquote></blockquote></blockquote><p>==（6）分割线==</p><hr><p>==（7）代码==</p><p><code>这是代码</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我是代码框</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.高亮: ==文字==&lt;br&gt;2.标题: #文字 ##文字 ###文字 最多支持6级的标题&lt;br&gt;3.加粗: &lt;strong&gt;文字&lt;/strong&gt;&lt;br&gt;4.斜体: &lt;em&gt;文字&lt;/em&gt;&lt;br&gt;5.上标: ^文字^&lt;br&gt;6.下标: ~文字~&lt;br&gt;7.列表: +文字</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/posts/4a17b156.html"/>
    <id>http://example.com/posts/4a17b156.html</id>
    <published>2022-10-01T13:47:07.810Z</published>
    <updated>2022-10-01T13:47:07.810Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Test-GitHub-Auto"><a href="#Test-GitHub-Auto" class="headerlink" title="Test GitHub Auto"></a>Test GitHub Auto</h3><pre><code>E:\6.Blog\source\img\HelloWorld\helloworld.png</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue3.2-Ref、Reactive学习</title>
    <link href="http://example.com/posts/4f9d0a8d.html"/>
    <id>http://example.com/posts/4f9d0a8d.html</id>
    <published>2022-10-01T11:06:58.000Z</published>
    <updated>2022-10-01T13:47:07.810Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ref-全家桶"><a href="#Ref-全家桶" class="headerlink" title="Ref 全家桶"></a>Ref 全家桶</h3><ul><li>==ref==</li></ul><ol><li><p>接受一个內部值并返回一个响应式且可变的ref对象；</p></li><li><p>取值、赋值都需要加 .value</p></li><li><p>可以拿到 HTML 页面元素</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div ref=&quot;dom&quot;&gt;我是dom&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;changeAttr&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">    import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">    const dom = ref&lt;HTMLDialogElement&gt;();</span><br><span class="line">    const changeAttr = () =&gt;&#123;</span><br><span class="line">    console.log(dom.value?.innerText);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>==isRef==</p><p>判断是不是一格 ref 对象</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, <span class="title class_">Ref</span>,isRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">message</span>: <span class="title class_">Ref</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt; = <span class="title function_">ref</span>(<span class="string">&quot;我是message&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">notRef</span>:<span class="built_in">number</span> = <span class="number">123</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeMsg</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  message.<span class="property">value</span> = <span class="string">&quot;change msg&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isRef</span>(message)); <span class="comment">//true</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isRef</span>(notRef)); <span class="comment">//false </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>==shallowRef==</li></ul><ol><li><p>创建一个跟踪自身 .value 变化的 ref，但不会使其值也变成响应式</p></li><li><p>会受到 ref 对象<strong>页面更新</strong>的影响</p></li></ol><ul><li><p>==triggerRef==</p><p>强制更新页面DOM，可以更新 shallowRef 对象的页面值</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;changeMsg&quot;&gt;change&lt;/button&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; Ref, shallowRef,triggerRef &#125; from &#x27;vue&#x27;</span><br><span class="line">type Obj = &#123;</span><br><span class="line">  name: string</span><br><span class="line">&#125;</span><br><span class="line">let message: Ref&lt;Obj&gt; = shallowRef(&#123;</span><br><span class="line">  name: &#x27;Liam&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">const changeMsg = () =&gt; &#123;</span><br><span class="line">message.value.name = &#x27;Change Liam&#x27;;</span><br><span class="line">triggerRef(message)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><ul><li><p>==customRef==</p><p>自定义 ref，customRef 是个工厂函数要求我们返回一个对象 并且实现 get 和 set 方法，适合去做防抖之类的</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; customRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title class_">MyRef</span>&lt;T&gt;(<span class="attr">value</span>: T) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">timer</span>: <span class="built_in">any</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">customRef</span>( <span class="function">(<span class="params">track, trigger</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="title function_">track</span>()</span><br><span class="line">                <span class="keyword">return</span> value</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">                <span class="comment">// 防抖</span></span><br><span class="line">                <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">                timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;触发了&quot;</span>);</span><br><span class="line">                    value = newVal;</span><br><span class="line">                    timer = <span class="literal">null</span>;</span><br><span class="line">                    <span class="title function_">trigger</span>()</span><br><span class="line">                &#125;, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">MyRef</span>&lt;<span class="title class_">String</span>&gt;(<span class="string">&quot;customRef&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改属性值</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">change</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">obj.<span class="property">value</span> = <span class="string">&quot;修改后的customRef&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reactive-全家桶"><a href="#Reactive-全家桶" class="headerlink" title="Reactive 全家桶"></a>Reactive 全家桶</h3><ul><li>==reactive==</li></ul><ol><li><p>支持应用类型：Array Object Map Set等；</p></li><li><p>取值、赋值不需要 .value；</p></li><li><p>reactive 返回的是 proxy，不能直接赋值 否则破坏响应式对象</p><p>解决方案1：使用 “push + 解构” 的方式</p></li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = reactive&lt;<span class="title class_">String</span>[]&gt;([])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [<span class="string">&#x27;EDG&#x27;</span>, <span class="string">&#x27;RNG&#x27;</span>, <span class="string">&#x27;JDG&#x27;</span>]</span><br><span class="line">    <span class="comment">//list = res; 直接赋值会破坏响应式对象</span></span><br><span class="line">    list.<span class="title function_">push</span>(...res);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        解决方案2：添加一个对象，把数组作为一个属性去解决</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;(item, index) in list.arr&quot; :key=&quot;index&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;button @click=&quot;add_&quot;&gt;添加&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">    let list = reactive&lt;&#123;arr: String[]&#125;&gt;(&#123;arr: []&#125;)</span><br><span class="line">    const add_ = () =&gt; &#123;</span><br><span class="line">        setTimeout(()=&gt;&#123;</span><br><span class="line">          let res = [&#x27;EDG&#x27;, &#x27;RNG&#x27;, &#x27;JDG&#x27;];</span><br><span class="line">          list.arr = res;</span><br><span class="line">          console.log(list);</span><br><span class="line">        &#125;, 2000)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>==readonly==</li></ul><ol><li>将对象转化为只读属性</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;Liam&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> read = <span class="title function_">readonly</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">show</span> = (<span class="params"></span>) =&gt;&#123;</span><br><span class="line">    read.<span class="property">name</span> = <span class="string">&quot;修改后的Liam&quot;</span>; <span class="comment">//错误：readonly 对象无法赋值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj,read);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>若对源对象进行赋值操作，会影响到 readonly 对象属性值</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;Liam&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> read = <span class="title function_">readonly</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">show</span> = (<span class="params"></span>) =&gt;&#123;</span><br><span class="line">    obj.<span class="property">name</span> = <span class="string">&quot;change Liam&quot;</span>; <span class="comment">//修改 obj 对象的属性值 会影响到 read 对象属性值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj,read);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>==shallowReactive==</li></ul><ol><li>与 shallowRef 类似，作用域只到第一个属性 .value</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj2 = <span class="title function_">shallowReactive</span>(&#123;</span><br><span class="line">    <span class="attr">foo</span>: &#123;</span><br><span class="line">        <span class="attr">bar</span>:&#123;</span><br><span class="line">            <span class="attr">num</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">edit</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    obj2.<span class="property">foo</span>.<span class="property">bar</span>.<span class="property">num</span> = <span class="number">3</span>; <span class="comment">//打印结果修改了，但显示并未修改</span></span><br><span class="line">    obj2.<span class="property">foo</span> = &#123;<span class="attr">name</span>:<span class="string">&#x27;Liam&#x27;</span>&#125;; <span class="comment">//响应式修改</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>会收到 reactive 页面更新的影响</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    reactive: &#123;&#123;obj1&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    shallowReactive: &#123;&#123;obj2&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;edit&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">  const obj1 = reactive(&#123;name: &#x27;Liam&#x27;&#125;)</span><br><span class="line">  const obj2: any = shallowReactive(&#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      bar:&#123;</span><br><span class="line">        num: 1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  const edit = () =&gt; &#123;</span><br><span class="line">    obj1.name = &#x27;我要改啦&#x27;,</span><br><span class="line">    obj2.foo.bar.num = &#x27;我被影响啦&#x27;,</span><br><span class="line">    console.log(obj2);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="to全家桶"><a href="#to全家桶" class="headerlink" title="to全家桶"></a>to全家桶</h3><ul><li><p>==toRef==</p><p>只能修改响应式对象的值，非响应式试图无变化：如果原始对象是非响应式的就不会更新视图，但数据实际上是发生变化的，如果原始对象是响应式的是会更新视图并且改变数据的</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt; &#123;&#123;man&#125;&#125; &lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">  import &#123; reactive, toRef &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">  const man = reactive(&#123;name: &#x27;Liam&#x27;, age: 22, like: &#x27;JK&#x27;&#125;);</span><br><span class="line">  const like = toRef(man,&#x27;like&#x27;);</span><br><span class="line">  </span><br><span class="line">  const change = () =&gt; &#123;</span><br><span class="line">    man.like = &#x27;洛丽塔&#x27;;</span><br><span class="line">    console.log(man);   </span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>toRef源码解析</strong>  </p><p>​    如果是 ref 对象直接返回，否则调用 ObjectRefImpl 创建一个类 ref 对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> toRef&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>, K <span class="keyword">extends</span> keyof T&gt;(</span><br><span class="line">  <span class="attr">object</span>: T,</span><br><span class="line">  <span class="attr">key</span>: K,</span><br><span class="line">  defaultValue?: T[K]</span><br><span class="line">): <span class="title class_">ToRef</span>&lt;T[K]&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> val = <span class="built_in">object</span>[key]</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">isRef</span>(val)</span><br><span class="line">    ? val</span><br><span class="line">    : (<span class="keyword">new</span> <span class="title class_">ObjectRefImpl</span>(<span class="built_in">object</span>, key, defaultValue) <span class="keyword">as</span> <span class="built_in">any</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    类 ref 对象只是做了值得改变，并未处理 “收集依赖” 和 “触发依赖” 的过程，所以普通对象无法更新视图</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ObjectRefImpl</span>&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>, K <span class="keyword">extends</span> keyof T&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isRef = <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> _object: T,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> _key: K,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> _defaultValue?: T[K]</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> val = <span class="variable language_">this</span>.<span class="property">_object</span>[<span class="variable language_">this</span>.<span class="property">_key</span>]</span><br><span class="line">    <span class="keyword">return</span> val === <span class="literal">undefined</span> ? (<span class="variable language_">this</span>.<span class="property">_defaultValue</span> <span class="keyword">as</span> T[K]) : val</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_object</span>[<span class="variable language_">this</span>.<span class="property">_key</span>] = newVal</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>==toRefs==</p><p>可以帮我们批量创建 ref 对象，主要是方便我们结构使用</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;name&#125;&#125; - &#123;&#123;age&#125;&#125; - &#123;&#123;like&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">  import &#123; reactive, toRef &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">  const man = reactive(&#123;name: &#x27;Liam&#x27;, age: 22, like: &#x27;JK&#x27;&#125;);</span><br><span class="line">  </span><br><span class="line">  const toRefs = &lt;T extends object&gt;(object: T) =&gt; &#123;</span><br><span class="line">    const map: any = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    for (let key in object)&#123;</span><br><span class="line">      map[key] = toRef(object, key);</span><br><span class="line">    &#125;</span><br><span class="line">    return map;</span><br><span class="line">  &#125;</span><br><span class="line">  const &#123;name, age, like&#125; = toRefs(man)</span><br><span class="line">  const change = () =&gt; &#123;</span><br><span class="line">    console.log(name, age, like);   </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>toRefs 源码解析</strong></p><p>​    其实就是把 reactive 对象的每一个属性都变成了 ref 对象循环调用 toRef</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">ToRefs</span>&lt;T = <span class="built_in">any</span>&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> keyof T]: <span class="title class_">ToRef</span>&lt;T[K]&gt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> toRefs&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt;(<span class="attr">object</span>: T): <span class="title class_">ToRefs</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (__DEV__ &amp;&amp; !<span class="title function_">isProxy</span>(<span class="built_in">object</span>)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`toRefs() expects a reactive object but received a plain one.`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">ret</span>: <span class="built_in">any</span> = <span class="title function_">isArray</span>(<span class="built_in">object</span>) ? <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="built_in">object</span>.<span class="property">length</span>) : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="built_in">object</span>) &#123;</span><br><span class="line">    ret[key] = <span class="title function_">toRef</span>(<span class="built_in">object</span>, key)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>==toRaw==</p><p>将响应式对象转化为普通对象</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt; &#123;&#123;man&#125;&#125; &lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">  import &#123; reactive, toRaw, toRef &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">  const man = reactive(&#123;name: &#x27;Liam&#x27;, age: 22, like: &#x27;JK&#x27;&#125;);</span><br><span class="line"></span><br><span class="line">  const change = () =&gt; &#123;</span><br><span class="line">    console.log(man, toRaw(man));</span><br><span class="line">    console.log(man, man[&#x27;__v_raw&#x27;]); //源码实现方式</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>toRaw 源码解析</strong></p><p>​    通过 ReactiveFlags 枚举值 取出 proxy 对象的 原始对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">ReactiveFlags</span> &#123;</span><br><span class="line">  <span class="variable constant_">SKIP</span> = <span class="string">&#x27;__v_skip&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">IS_REACTIVE</span> = <span class="string">&#x27;__v_isReactive&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">IS_READONLY</span> = <span class="string">&#x27;__v_isReadonly&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">IS_SHALLOW</span> = <span class="string">&#x27;__v_isShallow&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">RAW</span> = <span class="string">&#x27;__v_raw&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> toRaw&lt;T&gt;(<span class="attr">observed</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">const</span> raw = observed &amp;&amp; (observed <span class="keyword">as</span> <span class="title class_">Target</span>)[<span class="title class_">ReactiveFlags</span>.<span class="property">RAW</span>]</span><br><span class="line">  <span class="keyword">return</span> raw ? <span class="title function_">toRaw</span>(raw) : observed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Ref-全家桶&quot;&gt;&lt;a href=&quot;#Ref-全家桶&quot; class=&quot;headerlink&quot; title=&quot;Ref 全家桶&quot;&gt;&lt;/a&gt;Ref 全家桶&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;==ref==&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;接受一个內部值并返回一个响</summary>
      
    
    
    
    
    <category term="Vue3" scheme="http://example.com/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>Spring常用7大类注解</title>
    <link href="http://example.com/posts/34322d01.html"/>
    <id>http://example.com/posts/34322d01.html</id>
    <published>2022-09-11T19:50:40.000Z</published>
    <updated>2022-10-01T13:47:07.810Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Quasar项目如何使用Electron打包</title>
    <link href="http://example.com/posts/15bb80f9.html"/>
    <id>http://example.com/posts/15bb80f9.html</id>
    <published>2022-09-06T20:29:22.000Z</published>
    <updated>2022-10-01T13:47:07.810Z</updated>
    
    <content type="html"><![CDATA[<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p>  <a href="https://quasar.dev/">https://quasar.dev/</a></p><h2 id="Quasar项目-Vite版-使用Electron开发、打包、发布"><a href="#Quasar项目-Vite版-使用Electron开发、打包、发布" class="headerlink" title="Quasar项目(Vite版)使用Electron开发、打包、发布"></a>Quasar项目(Vite版)使用Electron开发、打包、发布</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li><p>创建Vite版本的 Quasar 项目</p><p><img src="https://i0.hdslb.com/bfs/album/55188e884d46128893044a630cc5f8db83002ced.png" alt="image-20220906195333774"></p><p>文件目录：</p><p><img src="https://i0.hdslb.com/bfs/album/ea49ab7a3fb1dcb78fc8bbf98791cba259bf2342.png" alt="image-20220906195443520"></p></li><li><p>在项目根目录下安装最新的 Electron 模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from the root of Quasar project</span></span><br><span class="line">$ <span class="built_in">cd</span> qua-vite</span><br><span class="line">$ npm install electron@latest</span><br><span class="line"><span class="comment"># or yarn upgrade electron@latest</span></span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/9bd0d9b2fa68b7e2cbf39ae9f46cbb801248e6d7.png" alt="image-20220906144407784"></p></li><li><p>将 Electron 模块添加到 Quasar 项目中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ quasar mode add electron</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/6d329e2c9261c08f28b282752ce0b84c002406dc.png" alt="image-20220906145603323"></p><div class="tip info"><ol><li>该命令会安装一些 Electron 安装包，同时创建 <code>/src-electron</code> 安装包。</li><li>每个 Election APP 有两个线程：主线程（处理新创建的 <code>/src-electron</code> 文件中窗口和初始化代码）和渲染线程（处理 <code>/src</code> 中应用程序的实际内容）</li><li>如果在使用 <code>npm</code> 安装过程中出现错误：① 检查自己的 <code>npm</code> 版本是否过期；② 如果自己电脑上没有安装过像 Python、Visual Studio 等开发工具，需要安装相关Visual C++ 文件，可自行百度相关解决办法。</li></ol></div></li></ol><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><p><strong>Windows桌面端</strong> ： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ quasar build</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/aa681f8492f623cd023a13331f448b47c2eb863f.png" alt="image-20220906195938513"></p><p><img src="https://i0.hdslb.com/bfs/album/59b5f9926b4ad754ba49c78fbc0fe6d7fc8df6ab.png" alt="image-20220906202043311"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ quasar dev -m electron</span><br><span class="line"></span><br><span class="line"><span class="comment"># passing extra parameters and/or options to</span></span><br><span class="line"><span class="comment"># underlying &quot;electron&quot; executable:</span></span><br><span class="line">$ quasar dev -m electron -- --no-sandbox --disable-setuid-sandbox</span><br><span class="line"><span class="comment"># when on Windows and using Powershell:</span></span><br><span class="line">$ quasar dev -m electron <span class="string">&#x27;--&#x27;</span> --no-sandbox --disable-setuid-sandbox</span><br></pre></td></tr></table></figure><p>​    上述命令执行之后将会打开一个 带有开发工具的 Electron 窗口。该窗口的渲染进程具有“热更新”功能，并且对主进程的更改也会被检测到(但是会在每次更改时重新启动 Electron 窗口)</p><p><img src="https://i0.hdslb.com/bfs/album/faf9cb0529ae63b2df63d5467ccb923a1d7cb271.png" alt="image-20220906151016209"></p><p>PS：热更新，即前端代码发生变化，前端页面也会变化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if you want to also access Vue Devtools for the renderer thread:</span></span><br><span class="line">$ quasar dev -m electron --devtools</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/670f273d48093b60b1ada6a2e3d11cdbf53290ca.png" alt="image-20220906172222692"></p><div class="tip error"><p>执行过程中遇到如下错误</p></div><p><img src="https://i0.hdslb.com/bfs/album/bf114dbda40e561eeac8409beee74bfdb1e93e9d.png" alt="image-20220906172337146"></p><p>解决方法：建议换源，重新执行命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config <span class="built_in">set</span> ELECTRON_MIRROR http://npm.taobao.org/mirrors/electron/</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/3a1751b5932fc03b916718a5952c6ecb51947523.png" alt="image-20220906172511956"></p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p><strong>Windows桌面端：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ quasar build -m electron</span><br><span class="line"></span><br><span class="line"><span class="comment"># ..or the longer form:</span></span><br><span class="line">$ quasar build --mode electron</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/b91effe7a79b2a0568e14d23aa773a59c5eb2e9b.png" alt="image-20220906200128209"></p><p><img src="https://i0.hdslb.com/bfs/album/4f9e367329fc438a300f6488d14721818142277f.png" alt="image-20220906202520531"></p><p>​    上述命令可以将app项目打包成产品并且使用electron包将其打包成可执行文件。如果希望为 UI 代码启用调试的生产版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ quasar build -m electron -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># ..or the longer form</span></span><br><span class="line">$ quasar build -m electron --debug</span><br></pre></td></tr></table></figure><h3 id="发布-学习中…"><a href="#发布-学习中…" class="headerlink" title="发布 - 学习中…"></a>发布 - 学习中…</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ quasar build -m electron -P always</span><br><span class="line"></span><br><span class="line"><span class="comment"># ..or the longer form:</span></span><br><span class="line">$ quasar build --mode electron --publish always</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/7d1c8d4c94a0388748686a5d9c31e4c893bf790f.png" alt="image-20220906193519004"></p><p>​    使用 <code>electron-builder</code> 来构建app。可以直接使用命令行(—bundler builder) 或 直接在 <code>quasar.config.js</code> 中 <code>electron.bundler</code> 部分设置。<strong><em>在使用 electron-packager 时这个方法是无效的</em></strong>。<img src="https://i0.hdslb.com/bfs/album/5685ea7e8db762cbebaee9e70436d2ad7187bf39.png" alt="image-20220906200341265"></p><p>​    合法的 <code>-P</code> 有 “onTag”, “onTagOrDraft”, “always” 和 “never”，另外 <code>quasar.config.js</code> 中的 <code>electron.builder</code> 必须具有有效的发布配置说明。</p><p>​    将 Windows EXE 安装文件发布到 Amazon S3的一个非常基本的配置如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// quasar.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="attr">electron</span>: &#123;</span><br><span class="line">  <span class="attr">bundler</span>: <span class="string">&#x27;builder&#x27;</span>, <span class="comment">// set here instead of using command line flag --bundler</span></span><br><span class="line">  <span class="attr">builder</span>: &#123;</span><br><span class="line">    <span class="attr">appId</span>: <span class="string">&#x27;com.electron.myelectronapp&#x27;</span>,</span><br><span class="line">    <span class="attr">win</span>: &#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;nsis&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">publish</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;provider&#x27;</span>: <span class="string">&#x27;s3&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;bucket&#x27;</span>: <span class="string">&#x27;myS3bucket&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/90ac4c8f1b9632a0db4a71863d7507af60728cfa.png" alt="image-20220906201630927"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;官方文档&quot;&gt;&lt;a href=&quot;#官方文档&quot; class=&quot;headerlink&quot; title=&quot;官方文档&quot;&gt;&lt;/a&gt;官方文档&lt;/h2&gt;&lt;p&gt;  &lt;a href=&quot;https://quasar.dev/&quot;&gt;https://quasar.dev/&lt;/a&gt;&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    
    <category term="Quasar开发" scheme="http://example.com/tags/Quasar%E5%BC%80%E5%8F%91/"/>
    
    <category term="Vite" scheme="http://example.com/tags/Vite/"/>
    
    <category term="Electron" scheme="http://example.com/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>Typora+Bilibili免费图床方法</title>
    <link href="http://example.com/posts/85bf8f13.html"/>
    <id>http://example.com/posts/85bf8f13.html</id>
    <published>2022-08-28T23:39:05.000Z</published>
    <updated>2022-10-01T13:47:07.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Typora-Bilibili免费图床方法"><a href="#Typora-Bilibili免费图床方法" class="headerlink" title="Typora+Bilibili免费图床方法"></a>Typora+Bilibili免费图床方法</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>​    在使用Typora写完博客时，需要发布到自己的主站（Github、csdn等）时，会发现发布之后<strong>照片损坏失效或加载速度很慢</strong>。如何解决这个问题呢？</p><p>​    目前有很多方法可以解决此类问题，普遍是选择上传图片，上传到Github服务器，但这种方法有时候图片加载很慢。同时目前gitee公开的仓库需要审查，很不方便。</p><p>​    依照这个思路，找到了一个可以将图片上传到bilibili服务器的方法。准所周知，b站看*指日可待，但永远不会倒闭。所以，该方法免费且快！</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>​    Windows 10        Typora 0.9.86</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h4 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h4><ul><li><p>去GitHub下载插件<a href="https://github.com/xlzy520/typora-plugin-bilibili![插件仓库](https://i0.hdslb.com/bfs/album/19ce68a352dd910d830935497d16e4dd932cf261.png">https://github.com/xlzy520/typora-plugin-bilibili![插件仓库](https://i0.hdslb.com/bfs/album/19ce68a352dd910d830935497d16e4dd932cf261.png</a>)</p><p>下载完成后，解压文件中的 <code>main.exe</code> 文件，将其解压到你指定文件目录底下（<strong>这个文件目录很重要后续会使用到，且目录文件中不能含有空格</strong>），建议将其放在Typora同目录下。我将其放在了 <code>D:\mingw64\picgo</code> 之下（不要问，问就是Typora安装路径上有空格文件！！）</p><p><img src="https://i0.hdslb.com/bfs/album/a9a79da2e7d83e483d2d91ed300cc5a3b1bdca02.png" alt="image-20220829001142563"></p></li><li><p>网页端打开 <code>bilibili</code> 官网，登录自己的账号之后，然后按 <code>F12</code>（或者 <code>Fn+F12</code> ），进行如下操作，复制 <code>SESSDATA</code> 。<img src="https://i0.hdslb.com/bfs/album/2a28618f4fa98da8b21ce51eabd792f8a1e857a7.png" alt="image-20220829003252822"></p></li></ul><h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h4><ul><li><p>打开 <code>Typora</code> 软件，进行如下操作：</p><p><img src="https://i0.hdslb.com/bfs/album/8d93e28a9177124ac8cbfb655457fda0002791f2.png" alt="Typora界面"></p><p><img src="https://i0.hdslb.com/bfs/album/36d32f9258778a1c07c8677699683132de335323.png" alt="image-20220829002808222"></p></li><li><p>将 <code>main.exe</code> 的目录地址 <code>bilibili</code> 网页端拿到的 <code>SESSDATA</code> 码进行组合，格式如下：<code>D:\mingw64\picgo\main.exe token=0dd3e50****(这是自己的SESSDATA码)</code> ，将组合后的字符串放到 <code>偏好设置\图像\上传服务器设定\自定义命令</code> 中，如下图所示：<img src="https://i0.hdslb.com/bfs/album/b4a3c84ef9c8831d533ab0c3b2be19be94264943.png" alt="image-20220829004039538"></p><h4 id="3-完成"><a href="#3-完成" class="headerlink" title="3.完成"></a>3.完成</h4></li></ul><p>​    完成上述配置步骤后，点击 <code>验证图片上传选项</code> 验证是否配置成功，如下图为配置成功显示内容。<img src="https://i0.hdslb.com/bfs/album/573cfa3d63a97c6ec022b850d2374b477492d40b.png" alt="image-20220829004250253"></p><p>​    <strong>！！重点 重点！！</strong></p><p>​    上述配置完成之后，若发布到自己博客上之后还是无法显示照片时，需要在自己搭建博客的 html页面增加 <code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;</code> 那么全站资源引用不会携带 <code>referrer</code> 。比如我需要在自己博客主题配置文件 <code>_config.butterfly.yml</code> 配置文件中添加代码。<img src="https://i0.hdslb.com/bfs/album/be35b43b5205763050720de6f6bcdab4bcfdb96a.png" alt="image-20220829101614441"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    本片博客主要解决了Typora使用中图片失效或加载速度慢的问题，主要使用了 <code>Custom Command</code> 方法解决这一问题。除此之外，还可以使用 PicGo(App) 的方法来解决这一问题，此篇博客不再赘述，有需要的小伙伴可自行搜索。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Typora-Bilibili免费图床方法&quot;&gt;&lt;a href=&quot;#Typora-Bilibili免费图床方法&quot; class=&quot;headerlink&quot; title=&quot;Typora+Bilibili免费图床方法&quot;&gt;&lt;/a&gt;Typora+Bilibili免费图床方法&lt;/</summary>
      
    
    
    
    
    <category term="Typora" scheme="http://example.com/tags/Typora/"/>
    
    <category term="Bilibili" scheme="http://example.com/tags/Bilibili/"/>
    
    <category term="图床" scheme="http://example.com/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
</feed>
